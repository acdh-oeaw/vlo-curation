<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	 version="3.0">

  <display-name>vlo-web-app</display-name>

	<!--
		There are three means to configure Wickets configuration mode and they 
		are tested in the order given.
		
		1) A system property: -Dwicket.configuration 
		2) servlet specific <init-param> 
		3) context specific <context-param>

    The value might be either "development" (reloading when templates change) or 
    "deployment". If no configuration is found, "development" is the default. -->

    <filter>
        <filter-name>wicket.vlo-web-app</filter-name>
        <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
        <init-param>
            <param-name>applicationFactoryClassName</param-name>
            <param-value>org.apache.wicket.spring.SpringWebApplicationFactory</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>wicket.vlo-web-app</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
        
    <!-- Wake up Spring when the web app starts -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener>

    <!-- 
      Context parameter below specifies the location of the spring application 
      context. Used to bootstrap annotation based configuration, see:
          eu.clarin.vmdi.vlo.config.VloSpringConfig
    -->
    <context-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>WEB-INF/applicationContext.xml</param-value>  
    </context-param>
    
    <!-- 
        Enable JavaMelody for application monitoring
        More info at https://code.google.com/p/javamelody/
    -->
    
    <filter>
        <filter-name>monitoring</filter-name>
        <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>monitoring</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <listener>
        <listener-class>net.bull.javamelody.SessionListener</listener-class>
    </listener>
</web-app>
